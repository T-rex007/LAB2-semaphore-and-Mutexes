#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"

#include "driver/gpio.h"

#include "esp_log.h"
#include "esp_system.h"
#include "semphr.h"
#include "driver/hw_timer.h"
SemaphoreHandle_t xSemaphore;
TaskHandle_t gpio_on_handle;
static const char *TAG = "main";

#define GPIO_OUT_NUM0 0
#define GPIO_PIN_SEL 1ULL<<GPIO_OUT_NUM0


void uHwTimerOnCallback(void *arg){
    int static state =0; 
    int time_after1;
    gpio_set_level(GPIO_OUT_NUM0, (state++)%2);
    time_after1 = hw_timer_get_count_data();
    ESP_LOGI(TAG, "Time after %d",time_after1 );
}


static void uGpioOnTask(void *arg){
    int time_now;
    int time_after;
    for (;;){
        
        //int static state =0; 
        
        time_now = hw_timer_get_load_data();
        if (xSemaphore != NULL){
            if(xSemaphoreTake(xSemaphore, 10) ==pdTRUE){
                //gpio_set_level(GPIO_OUT_NUM0, (state++)%2);
                //vTaskDelay(1000 / portTICK_RATE_MS);
                hw_timer_init(uHwTimerOnCallback, NULL);
                //hw_timer_set_load_data(1000/portTICK_RATE_MS);
                //hw_timer_enable(true);
                hw_timer_alarm_us(500, false);
                ESP_LOGI(TAG, "TaskOn is running");
                vTaskDelay(500/portTICK_RATE_MS);
                //time_after = hw_timer_get_count_data();
                //for(;;){
                //}
                //ESP_LOGI(TAG, "Time before: %d,Time after %d", time_now,time_after );
                ESP_LOGI(TAG, "IS the timer  enabled? %d", hw_timer_get_enable());
                //hw_timer_enable(false);
                hw_timer_deinit();
                xSemaphoreGive(xSemaphore);
            }
            else{
                ESP_LOGI(TAG, "Another task has the Mutex");
            }
        }
        else{
            ESP_LOGI(TAG, "Mutex was not created");
        }

    }
}

static void uGpioOffTask(void *arg){
    for(;;){
        if(xSemaphore != NULL){
            if(xSemaphoreTake(xSemaphore, 10) == pdTRUE){
                gpio_set_level(GPIO_OUT_NUM0, 0);
                xSemaphoreGive(xSemaphore);
            }
            else{
                ESP_LOGI(TAG, "Another task has the Mutex");
            }
        }
        else{
            ESP_LOGI(TAG, "Mutex was not created");
        }
    }
}

void app_main(void){
    gpio_config_t io_conf; 
    io_conf.intr_type = GPIO_INTR_DISABLE;
    io_conf.mode = GPIO_MODE_OUTPUT;
    io_conf.pin_bit_mask = GPIO_PIN_SEL;
    io_conf.pull_down_en = 0;
    io_conf.pull_up_en = 1;
    gpio_config(&io_conf);
    xSemaphore = xSemaphoreCreateMutex();
    xTaskCreate(uGpioOnTask, "uGpioOnTask", 2048, NULL, 10, &gpio_on_handle);
    // xTaskCreate(uGpioOffTask, "uGpioOffTask", 2048, NULL, 10, NULL);
    ESP_LOGI(TAG, "Setup is finished");
    while(1){
        continue;
    }
}